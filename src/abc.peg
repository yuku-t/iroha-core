{
  var AbcFile              = require("./AbcFile").AbcFile
    , AbcTune              = require("./AbcTune").AbcTune
    , ComposerField        = require("./ComposerField").ComposerField
    , KeyField             = require("./KeyField").KeyField
    , MeterField           = require("./MeterField").MeterField
    , ReferenceNumberField = require("./ReferenceNumberField").ReferenceNumberField
    , TitleField           = require("./TitleField").TitleField
    , TuneBody             = require("./TuneBody").TuneBody
    , TuneHeader           = require("./TuneHeader").TuneHeader
}

Start
  = AbcFile

AbcFile
  = abcTune:AbcTune { return new AbcFile(abcTune); }

AbcTune
  = tuneHeader:TuneHeader tuneBody:TuneBody { return new AbcTune(tuneHeader, tuneBody); }

TuneHeader
  = xf:ReferenceNumberField tf:TitleField ifs:InformationField* {
    return new TuneHeader(xf, tf, ifs);
  }

InformationField
  = ComposerField
  / KeyField
  / MeterField

ComposerField
  = "C:" text:TextString Linefeed { return new ComposerField(text); }

KeyField
  = "K:" text:TextString Linefeed { return new KeyField(text); }

MeterField
  = "M:" text:TextString Linefeed { return new MeterField(text); }

TitleField
  = "T:" text:TextString Linefeed { return new TitleField(text); }

ReferenceNumberField
  = "X:" number:Number Linefeed { return new ReferenceNumberField(number); }

TuneBody
  = TuneLine+ { return new TuneBody(); }

TuneLine
  = Element+ Linefeed?

Element
  = NotesGroup
  / BarLine
  / Space

NotesGroup
  = NoteElement+

NoteElement
  = Note NoteLength?

Note
  = [a-gA-G]

NoteLength
  = Number? ("/"+ Number?)?

BarLine
  = "|:"
  / ":|"
  / "|"

Linefeed
  = "\r\n" / "\n"

Space
  = [ \t]

TextString
  = cs:TextChar* { return cs.join(""); }

TextChar
  = [^\n]

Number
  = d:$[0-9]+ { return parseInt(d, 10); }
